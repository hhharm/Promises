https://contest.yandex.ru/contest/12897/problems/F/

F. Крестики-нолики (3 балла)
Необходимо написать сервер для игры в крестики-нолики.
Правила игры в крестики-нолики:

На поле 3x3 два игрока поочередно отмечают одну из пустых ячеек, используя метки x и o. Побеждает игрок, который первым расставит три свои метки в ряд, по горизонтали, вертикали или диагонали. В случае, если пустых ячеек не осталось, а победителя нет, объявляется ничья.

Примечания
Сервер представлен в виде функции, которая получит на вход два аргумента (игроков) и проведет между ними одну игру.
module.exports = function (player1, player2) {  
    // Your code here.  
};
Клиент игрока задан следующим интерфейсом:

interface PlayerClient {  
    on(event: ’move’, callback: (move: [number, number]) => void): void;  
    nextTurn(rivalMove: [number, number]): void;  
    retry(): void;  
    end(result: ’win’ | ’lose’ | ’tie’): void;  
}
Каждый ход представлен как массив вида 
[
i
,
j
]
, где 
i
 и 
j
 — номера строки и столбца ячейки, в которую нужно поставить метку, 
0
≤
i
,
j
≤
2
.
Сервер должен вызывать соответствующие методы клиентов, чтобы сообщить, что нужно сделать следующий ход (метод nextTurn с последним ходом оппонента), переходить в случае неверного хода (метод retry) или сообщить, что игра завершилась и с каким исходом (метод end с результатом игры).
Игру всегда начинает первый игрок. Чтобы сообщить игроку, что ему необходимо сделать ход, нужно вызвать метод nextTurn у его клиента, передав аргументом последний ход, который делал соперник или null, если это первый ход в игре.
Игрок сообщит о своем ходе, выбросив событие типа move с аргументом 
[
i
,
j
]
. Гарантируется, что игрок сделает как минимум один ход после вызова у его клиента ‘nextTurn‘.
Все ходы, которые игроки пытаются сделать не в свою очередь, должны игнорироваться.
В случае, если игрок делает недопустимый ход, то есть пытается поставить метку в непустую клетку, нужно вызвать retry у его клиента, чтобы он переходил. Также гарантируется, что игрок сделает хотя бы один ход после вызова этого метода, с таким же событием move, как и при обычном ходе. Если игрок делает недопустимый ход три раза подряд, ему засчитывается поражение, то есть если после второго подряд retry игрок снова делает недопустимый ход - он проигрывает.
В конце игры необходимо сообщить результат обоим игрокам, вызвав у каждого из них метод ‘end‘ с соответствующей строкой: ’win’ в случае победы, ’lose’ в случае поражения и ’tie’ в случае ничьей.
Вердикт RE также означает, что отправленное решение неверно.
